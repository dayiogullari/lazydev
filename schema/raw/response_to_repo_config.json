{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Nullable_RepoConfig",
  "anyOf": [
    {
      "$ref": "#/definitions/RepoConfig"
    },
    {
      "type": "null"
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "LabelConfig": {
      "type": "object",
      "required": ["label_id", "reward_config", "reward_contract"],
      "properties": {
        "label_id": {
          "description": "The id of the github pr label. Any PRs with this label will be rewarded with `reward_contract` and `reward_config`.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "reward_config": {
          "description": "Additional configuration that will be passed to the reward contract. This is stringified json since [`serde_json_wasm`] doesn't support a dynamic `Value`-like object.",
          "type": "string"
        },
        "reward_contract": {
          "description": "The address of the reard contract that will process the [`RewardMsg`][crate::msg::RewardMsg] callback.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RepoConfig": {
      "type": "object",
      "required": ["label_configs"],
      "properties": {
        "label_configs": {
          "description": "All of the reward configurations for this repo. A single label may have multiple configured rewards.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LabelConfig"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
