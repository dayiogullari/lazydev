{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryRewardsResponse",
  "type": "object",
  "required": ["claimed", "rewards"],
  "properties": {
    "claimed": {
      "description": "Whether or not these rewards have already been claimed. If `true`, then `rewards` is the *actual* reward that the user received when they originally claimed the rewards.",
      "type": "boolean"
    },
    "rewards": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PrReward"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "PrReward": {
      "oneOf": [
        {
          "type": "object",
          "required": ["token"],
          "properties": {
            "token": {
              "type": "object",
              "required": ["amount", "denom"],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "denom": {
                  "description": "The denom of the token for this reward. If this is a native token, it will be the denom, otherwise if this is a cw20 token, this will be the contract address of the token.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
