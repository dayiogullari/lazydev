{
  "contract_name": "lazydev-token-reward",
  "contract_version": "0.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "config",
      "lazydev_address"
    ],
    "properties": {
      "config": {
        "$ref": "#/definitions/Config"
      },
      "lazydev_address": {
        "$ref": "#/definitions/Addr"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Config": {
        "type": "object",
        "required": [
          "cw20_base_code_id",
          "decimals",
          "name",
          "symbol",
          "valid_orgs",
          "valid_repos"
        ],
        "properties": {
          "cw20_base_code_id": {
            "description": "The code id of the cw20 base code to instantiate the token with.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "decimals": {
            "description": "The decimals of the cw20 token. This will be forwarded to the cw20-base instantiation.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "name": {
            "description": "The name of the cw20 token. This will be forwarded to the cw20-base instantiation.",
            "type": "string"
          },
          "symbol": {
            "description": "The symbol of the cw20 token. This will be forwarded to the cw20-base instantiation.",
            "type": "string"
          },
          "valid_orgs": {
            "description": "The orgs this contract will provide rewards for.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "valid_repos": {
            "description": "The repos this contract will provide rewards for.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Repo"
            }
          }
        },
        "additionalProperties": false
      },
      "Repo": {
        "type": "object",
        "required": [
          "org",
          "repo"
        ],
        "properties": {
          "org": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "reward"
        ],
        "properties": {
          "reward": {
            "$ref": "#/definitions/RewardMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Repo": {
        "type": "object",
        "required": [
          "org",
          "repo"
        ],
        "properties": {
          "org": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RewardMsg": {
        "description": "The reward callback message for the reward contracts. This is expected to be in an `ExecuteMsg` under the key `\"reward\"`.",
        "type": "object",
        "required": [
          "pr_id",
          "recipient_address",
          "repo",
          "reward_config",
          "user_id"
        ],
        "properties": {
          "pr_id": {
            "description": "The github pr id that the rewards are for.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "recipient_address": {
            "description": "The recipient address to send the rewards to.",
            "allOf": [
              {
                "$ref": "#/definitions/Addr"
              }
            ]
          },
          "repo": {
            "description": "The repo that the rewards are for.",
            "allOf": [
              {
                "$ref": "#/definitions/Repo"
              }
            ]
          },
          "reward_config": {
            "description": "Additional reward config.",
            "type": "string"
          },
          "user_id": {
            "description": "The github user id of the user receiving the reward.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "rewards"
        ],
        "properties": {
          "rewards": {
            "$ref": "#/definitions/RewardMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Repo": {
        "type": "object",
        "required": [
          "org",
          "repo"
        ],
        "properties": {
          "org": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RewardMsg": {
        "description": "The reward callback message for the reward contracts. This is expected to be in an `ExecuteMsg` under the key `\"reward\"`.",
        "type": "object",
        "required": [
          "pr_id",
          "recipient_address",
          "repo",
          "reward_config",
          "user_id"
        ],
        "properties": {
          "pr_id": {
            "description": "The github pr id that the rewards are for.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "recipient_address": {
            "description": "The recipient address to send the rewards to.",
            "allOf": [
              {
                "$ref": "#/definitions/Addr"
              }
            ]
          },
          "repo": {
            "description": "The repo that the rewards are for.",
            "allOf": [
              {
                "$ref": "#/definitions/Repo"
              }
            ]
          },
          "reward_config": {
            "description": "Additional reward config.",
            "type": "string"
          },
          "user_id": {
            "description": "The github user id of the user receiving the reward.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "rewards": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryRewardsResponse",
      "type": "object",
      "required": [
        "claimed",
        "rewards"
      ],
      "properties": {
        "claimed": {
          "description": "Whether or not these rewards have already been claimed. If `true`, then `rewards` is the *actual* reward that the user received when they originally claimed the rewards.",
          "type": "boolean"
        },
        "rewards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrReward"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "PrReward": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "amount",
                    "denom"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Uint128"
                    },
                    "denom": {
                      "description": "The denom of the token for this reward. If this is a native token, it will be the denom, otherwise if this is a cw20 token, this will be the contract address of the token.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
